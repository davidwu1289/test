@Configuration
@EnableBatchProcessing
public class BatchParallelConfig {

    @Autowired
    MongoDbWriter writer;

    @Autowired
    MongoTemplate mongoTemplate;

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired 
    private StepBuilderFactory stepBuilderFactory;

    @Autowired
    ApplicationConfiguration configuration;

    @Bean
    public Job oneTimeLoad() throws Exception {
        return jobBuilderFactory.get("oneTimeLoad")
            .incrementer(new RunIdIncrementer())
            .flow(truncateStageCollectionStep())
            .next(truncateTargetCollectionStep())
            .next(masterStep())
            .next(deleteFilesStep())
            .next(initialLoadAggregatorStep())
            .next(copyStageToEmailHistoryStageStep())
            .next(copyTargetToEmailHistoryTargetStep())
            .next(checkCountStep())
            .next(verifyMongoCountStep())
            .end().build();
    }

    @Bean
    public Step truncateStageCollectionStep() {
        return stepBuilderFactory.get("truncateStageCollectionStep").tasklet((stepContribution, chunkContext) -> {
            mongoTemplate.dropCollection("stageCollectionName");
            return RepeatStatus.FINISHED;
        }).build();
    }

    @Bean
    public Step truncateTargetCollectionStep() {
        return stepBuilderFactory.get("truncateTargetCollectionStep").tasklet((stepContribution, chunkContext) -> {
            mongoTemplate.dropCollection("targetCollectionName");
            return RepeatStatus.FINISHED;
        }).build();
    }

    @Bean
    public Step copyStageToEmailHistoryStageStep() {
        return stepBuilderFactory.get("copyStageToEmailHistoryStageStep").tasklet((stepContribution, chunkContext) -> {
            List<Document> stageData = mongoTemplate.findAll(Document.class, "stageCollectionName");
            mongoTemplate.insert(stageData, "emailHistoryStage");
            return RepeatStatus.FINISHED;
        }).build();
    }

    @Bean
    public Step copyTargetToEmailHistoryTargetStep() {
        return stepBuilderFactory.get("copyTargetToEmailHistoryTargetStep").tasklet((stepContribution, chunkContext) -> {
            List<Document> targetData = mongoTemplate.findAll(Document.class, "targetCollectionName");
            mongoTemplate.insert(targetData, "emailHistoryTarget");
            return RepeatStatus.FINISHED;
        }).build();
    }

    @Bean
    public Step checkCountStep() {
        return stepBuilderFactory.get("checkCountStep").tasklet(new CheckCountsTasklet()).build();
    }

    @Bean
    public Step verifyMongoCountStep() {
        return stepBuilderFactory.get("verifyMongoCountStep").tasklet(new VerifyMongoCountsTasklet()).build();
    }

    // ... Other beans and steps remain unchanged ...

}

