spring.data.mongodb.uri=mongodb://localhost:27017/yourDatabase 
 

BatchConfiguration
  import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.core.MongoTemplate;

@Configuration
public class BatchConfiguration {

    @Autowired
    public JobBuilderFactory jobBuilderFactory;

    @Autowired
    public StepBuilderFactory stepBuilderFactory;

    @Autowired
    private MongoTemplate mongoTemplate;

    @Bean
    public Step job1Step1() {
        return stepBuilderFactory.get("job1Step1")
            .tasklet(new DataProcessorTasklet())
            .build();
    }

    @Bean
    public Job job1() {
        return jobBuilderFactory.get("job1")
            .start(job1Step1())
            .build();
    }

    @Bean
    public Step newJob1Step1() {
        return stepBuilderFactory.get("newJob1Step1")
            .tasklet(new CheckCountsTasklet("path/to/control/file.txt", mongoTemplate))
            .build();
    }

    @Bean
    public Job newJob1() {
        return jobBuilderFactory.get("newJob1")
            .start(newJob1Step1())
            .build();
    }

    @Bean
    public Step newJob2Step1() {
        return stepBuilderFactory.get("newJob2Step1")
            .tasklet(new VerifyMongoCountsTasklet(mongoTemplate))
            .build();
    }

    @Bean
    public Job newJob2() {
        return jobBuilderFactory.get("newJob2")
            .start(newJob2Step1())
            .build();
    }
}
  

DataProcessorTasklet


import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;

public class DataProcessorTasklet implements Tasklet {
    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {
        // Your existing DataProcessor code adapted to be here
        return RepeatStatus.FINISHED;
    }
}


CheckCountsTasklet


import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.data.mongodb.core.MongoTemplate;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class CheckCountsTasklet implements Tasklet {
    private final String controlFilePath;
    private final MongoTemplate mongoTemplate;

    public CheckCountsTasklet(String controlFilePath, MongoTemplate mongoTemplate) {
        this.controlFilePath = controlFilePath;
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {
        try {
            int controlFileCount = readControlFile(controlFilePath);
            StageCountView stageCountView = mongoTemplate.findOne(
                Query.query(Criteria.where("id").is(null)),
                StageCountView.class,
                "vweMailCntDocs"
            );
            if (stageCountView.getCount() != controlFileCount) {
                throw new IllegalStateException("Counts do not match");
            }
        } catch (IOException e) {
            throw new IllegalStateException("Failed to read control file", e);
        }
        return RepeatStatus.FINISHED;
    }

    // Function to read the control file and get the expected record count
    private int readControlFile(String controlFilePath) throws IOException {
        try (BufferedReader br = Files.newBufferedReader(Paths.get(controlFilePath))) {
            String line = br.readLine();
            if (line != null) {
                return Integer.parseInt(line.trim());
            } else {
                throw new IOException("Control file is empty");
            }
        }
    }
}



VerifyMongoCountsTasklet


import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.data.mongodb.core.MongoTemplate;

public class VerifyMongoCountsTasklet implements Tasklet {
    private final MongoTemplate mongoTemplate;

    public VerifyMongoCountsTasklet(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {
        StageCountView stageCountView = mongoTemplate.findOne(
            Query.query(Criteria.where("id").is(null)),
            StageCountView.class,
            "vweMailCntDocs"
        );
        TargetCountView targetCountView = mongoTemplate.findOne(
            Query.query(Criteria.where("id").is(null)),
            TargetCountView.class,
            "vweMailDistCust"
        );
        if (stageCountView.getCount() != targetCountView.getDisticntTgtCount()) {
            throw new IllegalStateException("Counts do not match");
        }
        return RepeatStatus.FINISHED;
    }
}


Views

public class StageCountView {
    private int count;

    public int getCount() {
        return count;
    }
}

public class TargetCountView {
    private int disticntTgtCount;

    public int getDisticntTgtCount() {
        return disticntTgtCount;
    }
}


Application


import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}

