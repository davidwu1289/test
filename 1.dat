import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

    @Autowired
    private JobBuilderFactory jobBuilders;

    @Autowired
    private StepBuilderFactory stepBuilders;

    @Bean
    public Job dataProcessingJob() {
        return jobBuilders.get("dataProcessingJob")
                .start(stepBuilders.get("processDataStep").tasklet(new DataProcessingTasklet()).build())
                .build();
    }

    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(BatchConfiguration.class);
        JobLauncher jobLauncher = context.getBean(JobLauncher.class);
        Job job = context.getBean("dataProcessingJob", Job.class);
        try {
            JobExecution execution = jobLauncher.run(job, new JobParameters());
            System.out.println("Job Status : " + execution.getStatus());
        } catch (Exception e) {
            System.err.println("Job failed: " + e.getMessage());
        }
    }
}

class DataProcessingTasklet implements Tasklet {

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
        List<FieldInfo> schema = Arrays.asList(
                new FieldInfo("WS-CIF-CUST NO", "Numeric", 15),
                new FieldInfo("WS-XCM-COID-N", "Numeric", 5)
        );
        DataProcessor dataProcessor = new DataProcessor(schema);
        String dataFile = "path/to/data/file.dat";
        String controlFile = "path/to/control/file.txt";
        String outputDir = "path/to/output/directory";
        Integer linesPerFile = 1000000;
        Integer sizePerFile = null;
        try {
            dataProcessor.processDataFile(dataFile, controlFile, outputDir, linesPerFile, sizePerFile);
        } catch (IOException e) {
            System.err.println("Error processing the data file: " + e.getMessage());
        }
        return RepeatStatus.FINISHED;
    }
}

// Your existing FieldInfo, Main, DataProcessor, and DataValidator classes come here
// Make sure to remove or comment out the Main class's main() method as it's not needed.

