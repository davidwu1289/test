// Modified DataProcessor Class
public class DataProcessor {
    // ... (rest of the code remains the same)
    
    public void processDataFile(String dataFilePath, String outputDir, Integer linesPerFile, Integer sizePerFile) throws IOException, InterruptedException {
        int expectedRecordCount = readControlFile(controlFilePath);
        
        // Removed parallel processing to avoid extra memory consumption
        try (Stream<String> lines = Files.lines(Paths.get(dataFilePath))) {
            lines.forEachOrdered(line -> processRecord(line));
        }
        
        // Splitting logic moved to a separate method
        splitDataIntoOutputFiles(dataFilePath, outputDir, linesPerFile, sizePerFile);
    }

    private void splitDataIntoOutputFiles(String dataFilePath, String outputDir, Integer linesPerFile, Integer sizePerFile) throws IOException {
        // Use BufferedReader and BufferedWriter for efficient I/O operations
        try (BufferedReader br = new BufferedReader(new FileReader(dataFilePath));
             BufferedWriter bw = null;) {
            
            String line;
            int recordCount = 0;
            int fileCount = 1;
            long currentFileSize = 0;
            String currentOutputFileName = getOutputFileName(outputDir, fileCount);
            
            while ((line = br.readLine()) != null) {
                // ... (rest of the code remains the same)
                
                // Write the line to the current output file
                if (bw == null) {
                    bw = new BufferedWriter(new FileWriter(currentOutputFileName));
                }
                bw.write(line);
                bw.newLine();
                
                // Update the record count and current file size
                recordCount++;
                currentFileSize += line.getBytes().length;
                
                // Close and reinitialize BufferedWriter if needed
                if (shouldSplitFile(linesPerFile, sizePerFile, recordCount, currentFileSize)) {
                    bw.close();
                    fileCount++;
                    currentOutputFileName = getOutputFileName(outputDir, fileCount);
                    bw = new BufferedWriter(new FileWriter(currentOutputFileName));
                    currentFileSize = 0;
                    recordCount = 0;
                }
            }
        }
    }

    private boolean shouldSplitFile(Integer linesPerFile, Integer sizePerFile, int recordCount, long currentFileSize) {
        if (linesPerFile != null && recordCount >= linesPerFile) {
            return true;
        }
        
        if (sizePerFile != null && currentFileSize >= sizePerFile) {
            return true;
        }
        
        return false;
    }
}

