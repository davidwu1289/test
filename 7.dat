private void splitDataIntoOutputFiles(String dataFilePath, String outputDir, Integer linesPerFile, Integer sizePerFile) throws IOException {
        logger.info("Starting to split data into output files.");
        
        int fileCounter = 1;
        int lineCounter = 0;
        long currentFileSize = 0;
        String currentOutputFileName = outputDir + File.separator + "output" + fileCounter + ".dat";
        BufferedWriter bw = null;
        
        try (BufferedReader br = Files.newBufferedReader(Paths.get(dataFilePath))) {
            logger.info("Successfully opened the data file: {}", dataFilePath);

            bw = new BufferedWriter(new FileWriter(currentOutputFileName));
            logger.info("Successfully created the output file: {}", currentOutputFileName);
            
            String line;
            while ((line = br.readLine()) != null) {
                try {
                    bw.write(line);
                    bw.newLine();

                    lineCounter++;
                    currentFileSize += line.length() + 1;  // Add 1 for the new line character

                    if ((linesPerFile != null && lineCounter >= linesPerFile) || (sizePerFile != null && currentFileSize >= sizePerFile)) {
                        bw.flush();
                        logger.info("Successfully flushed the output file: {}", currentOutputFileName);

                        bw.close();
                        logger.info("Successfully closed the output file: {}", currentOutputFileName);

                        fileCounter++;
                        lineCounter = 0;
                        currentFileSize = 0;
                        
                        currentOutputFileName = outputDir + File.separator + "output" + fileCounter + ".dat";
                        bw = new BufferedWriter(new FileWriter(currentOutputFileName));
                        logger.info("Successfully created a new output file: {}", currentOutputFileName);
                    }
                } catch (IOException e) {
                    logger.error("Failed to write to the output file: {}", currentOutputFileName);
                    throw new IOException("Error writing to output file: " + currentOutputFileName, e);
                }
            }

            bw.flush();
            logger.info("Successfully flushed the last output file: {}", currentOutputFileName);
            
            bw.close();  // Explicitly close the last BufferedWriter here
            logger.info("Successfully closed the last output file: {}", currentOutputFileName);

            bw = null;  // Set BufferedWriter to null to avoid closing it again in the finally block
            
        } catch (IOException e) {
            logger.error("Failed to read the input file or to write to the output file.");
            throw new IOException("Error reading the input file: " + dataFilePath, e);
        } finally {
            if (bw != null) {
                try {
                    bw.close();
                    logger.info("Successfully closed the last BufferedWriter.");
                } catch (IOException e) {
                    logger.error("Failed to close the BufferedWriter. Exception: {}", e.getMessage(), e);
                    throw new IOException("Error closing the BufferedWriter", e);
                }
            }
        }
    }
