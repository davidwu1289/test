import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class DataProcessor {
    // Other methods and constructor here...

    private static final String DATE_FORMAT = "CyyMMdd";
    private static final String TIMESTAMP_FORMAT = "CCyyMMddHHmmssSSSSSS";

    // Rest of the code including printDataInJSONFormat, readControlFile, validateDataFile, and splitDataIntoOutputFiles
    // ...

    // Helper method to parse a line and create a Record object
    private Record parseRecord(String line) {
        // Split the line by delimiters (assuming comma here) to get individual field values
        String[] fields = line.split(",");

        // Create a new Record object
        Record record = new Record();

        // Iterate over each field in the schema and set the values in the Record object
        for (int i = 0; i < schema.size(); i++) {
            FieldInfo fieldInfo = schema.get(i);
            String fieldValue = fields[i].trim();

            switch (fieldInfo.getType()) {
                case "Numeric":
                    // Remove leading zeros and parse as a long integer
                    record.setValue(fieldInfo.getName(), Long.parseLong(fieldValue));
                    break;
                case "String":
                    record.setValue(fieldInfo.getName(), fieldValue);
                    break;
                case "Date":
                    // Parse the date using the specified format
                    Date date = parseDate(fieldValue, DATE_FORMAT);
                    record.setValue(fieldInfo.getName(), date);
                    break;
                case "Timestamp":
                    // Parse the timestamp using the specified format
                    Date timestamp = parseDate(fieldValue, TIMESTAMP_FORMAT);
                    record.setValue(fieldInfo.getName(), timestamp);
                    break;
                default:
                    // Handle other data types if needed
                    break;
            }
        }

        return record;
    }

    // Helper method to parse a date using the specified format
    private Date parseDate(String dateString, String format) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat(format);
            return sdf.parse(dateString);
        } catch (ParseException e) {
            // Handle parsing errors if needed
            return null;
        }
    }

    // Other helper methods here...

    // Inner class representing the data structure of each record
    private static class Record {
        private Map<String, Object> data;

        public Record() {
            data = new HashMap<>();
        }

        public void setValue(String fieldName, Object value) {
            data.put(fieldName, value);
        }

        public Object getValue(String fieldName) {
            return data.get(fieldName);
        }

        // Add other methods as needed for accessing the data
    }
}

